<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Perl | 陌上花开 可缓缓归矣]]></title>
  <link href="http://juelite.github.io/blog/categories/perl/atom.xml" rel="self"/>
  <link href="http://juelite.github.io/"/>
  <updated>2017-08-14T17:00:25+08:00</updated>
  <id>http://juelite.github.io/</id>
  <author>
    <name><![CDATA[juelite]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Regex（正则）入门]]></title>
    <link href="http://juelite.github.io/blog/2012/01/12/regex/"/>
    <updated>2012-01-12T10:39:27+08:00</updated>
    <id>http://juelite.github.io/blog/2012/01/12/regex</id>
    <content type="html"><![CDATA[<h4>1，元字符</h4>

<table>
<thead>
<tr>
<th style="text-align:center;">符号 </th>
<th style="text-align:center;"> 释义 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;">   .  </td>
<td style="text-align:center;">匹配除换行符以外的任意字符</td>
</tr>
<tr>
<td style="text-align:center;">   \w </td>
<td style="text-align:center;">匹配字母或数字或下划线或汉字</td>
</tr>
<tr>
<td style="text-align:center;">   \s </td>
<td style="text-align:center;">匹配任意空白符</td>
</tr>
<tr>
<td style="text-align:center;">   \d </td>
<td style="text-align:center;">匹配数字</td>
</tr>
<tr>
<td style="text-align:center;">   \b </td>
<td style="text-align:center;">匹配单词的开始或结束</td>
</tr>
<tr>
<td style="text-align:center;">   ^  </td>
<td style="text-align:center;">匹配字符串的开始</td>
</tr>
<tr>
<td style="text-align:center;">   $  </td>
<td style="text-align:center;">匹配字符串的结束</td>
</tr>
</tbody>
</table>


<h4>2，重复</h4>

<table>
<thead>
<tr>
<th style="text-align:center;">符号 </th>
<th style="text-align:center;"> 释义 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;">   *     </td>
<td style="text-align:center;">重复零次或更多次</td>
</tr>
<tr>
<td style="text-align:center;">   +     </td>
<td style="text-align:center;">重复一次或更多次</td>
</tr>
<tr>
<td style="text-align:center;">   ?     </td>
<td style="text-align:center;">重复零次或一次</td>
</tr>
<tr>
<td style="text-align:center;">   {n}   </td>
<td style="text-align:center;">重复 n 次</td>
</tr>
<tr>
<td style="text-align:center;">   {n,}  </td>
<td style="text-align:center;">重复 n 次或更多次</td>
</tr>
<tr>
<td style="text-align:center;">   {n,m} </td>
<td style="text-align:center;">重复 n 次到 m 次</td>
</tr>
</tbody>
</table>


<h4>3，常用的反义</h4>

<table>
<thead>
<tr>
<th style="text-align:center;">符号</th>
<th style="text-align:center;">释义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;">   \W </td>
<td style="text-align:center;"> 匹配任意不是字母，数字，下划线，汉字的字符 </td>
</tr>
<tr>
<td style="text-align:center;">   \S </td>
<td style="text-align:center;">匹配任意不是空白符的字符</td>
</tr>
<tr>
<td style="text-align:center;">   \D </td>
<td style="text-align:center;">匹配任意非数字的字符</td>
</tr>
<tr>
<td style="text-align:center;">   \B </td>
<td style="text-align:center;">匹配不是单词开头或结束的位置</td>
</tr>
<tr>
<td style="text-align:center;">   [^x] </td>
<td style="text-align:center;">匹配除了x以外的任意字符</td>
</tr>
<tr>
<td style="text-align:center;">   [^aeiou] </td>
<td style="text-align:center;">匹配除了aeiou这几个字母以外的任意字符</td>
</tr>
</tbody>
</table>


<p>练习1 验证$eamil的合法性</p>

<pre><code>    $email = array('444371889@qq.com','1212121212.com','hahahaha','Asw@zj.gov.cn','Asw@zj.info');

    $pattern = '/^[a-z0-9_]+@(?:[a-z0-9_-]+\.)+(?:com|cn)/i'; // （exp）匹配并捕获 （?:exp）匹配

    foreach ($email as $key =&gt; $value) {
        if(preg_match($pattern, $value)){
            echo $value , ' pass' , PHP_EOL;
        }else{
            echo $value , ' fail' , PHP_EOL;
        }
        //preg_match($pattern, $value , $RESULT[$key]);
    }
    var_dump($RESULT);
</code></pre>

<p>输出：
<code>
    444371889@qq.com pass
    1212121212.com fail
    hahahaha fail
    Asw@zj.gov.cn pass
    Asw@zj.info fail
</code>
练习2 匹配出正确的时间
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$str = &ldquo;
</span><span class='line'>13:00
</span><span class='line'>212:36w ww22:48kl
</span><span class='line'>4:32  这样的时间应该是正确的
</span><span class='line'>22:00
</span><span class='line'>23:59
</span><span class='line'>22:61
</span><span class='line'>1112:13 非法
</span><span class='line'>43:33 非法
</span><span class='line'>12:60
</span><span class='line'>12:33
</span><span class='line'>000:34
</span><span class='line'>00:00
</span><span class='line'>23:59
</span><span class='line'>24:59 显然没有这样的时间
</span><span class='line'>24:00
</span><span class='line'>30
</span><span class='line'>&rdquo;;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;$pattern = '/[0-2]{1}[0-3]{1}:[0-5]{1}[0-9]{1}/';
</span><span class='line'>
</span><span class='line'>preg_match_all($pattern, $str , $res);
</span><span class='line'>
</span><span class='line'>var_dump($res);
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;输出：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;array(1) {
</span><span class='line'>[0]=&gt;
</span><span class='line'>array(10) {
</span><span class='line'>    [0]=&gt;
</span><span class='line'>    string(5) "13:00"
</span><span class='line'>    [1]=&gt;
</span><span class='line'>    string(5) "12:36"
</span><span class='line'>    [2]=&gt;
</span><span class='line'>    string(5) "22:48"
</span><span class='line'>    [3]=&gt;
</span><span class='line'>    string(5) "22:00"
</span><span class='line'>    [4]=&gt;
</span><span class='line'>    string(5) "23:59"
</span><span class='line'>    [5]=&gt;
</span><span class='line'>    string(5) "12:13"
</span><span class='line'>    [6]=&gt;
</span><span class='line'>    string(5) "12:33"
</span><span class='line'>    [7]=&gt;
</span><span class='line'>    string(5) "00:34"
</span><span class='line'>    [8]=&gt;
</span><span class='line'>    string(5) "00:00"
</span><span class='line'>    [9]=&gt;
</span><span class='line'>    string(5) "23:59"
</span><span class='line'>}
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>可是我们并没有 "4:32  这样的时间应该是正确的" 这个正确的时间
</span><span class='line'>是时候用到分支了
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;$pattern = &lsquo;/[0-2]{1}[0-9]{1}:[0-5]{1}[0-9]{1}|[0-9]{1}:[0-5]{1}[0-9]{1}/&rsquo;;</span></code></pre></td></tr></table></div></figure></p>

<p>注意 匹配分枝条件时，将会从左到右地测试每个条件，如果满足了某个分枝的话，就不会去再管其它的条件了。
举例：
```
\d{5}-\d{4}|\d{5} //匹配类似 23843-3234 或 21234 美国邮编格式</p>

<h1>美国邮编的规则是5位数字，或者用连字号间隔的9位数字</h1>

<p>```
如果你把它改成\d{5}|\d{5}-\d{4}的话，那么就只会匹配5位的邮编(以及9位邮编的前5位)。</p>

<p>取反义实例：</p>
]]></content>
  </entry>
  
</feed>
