<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Laravel | yuuuu.wang`blog]]></title>
  <link href="http://juelite.github.io/blog/categories/laravel/atom.xml" rel="self"/>
  <link href="http://juelite.github.io/"/>
  <updated>2017-09-27T14:57:59+08:00</updated>
  <id>http://juelite.github.io/</id>
  <author>
    <name><![CDATA[wang yu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Laravel_learn_notes]]></title>
    <link href="http://juelite.github.io/blog/2017/09/19/laravel-learn-notes/"/>
    <updated>2017-09-19T14:05:35+08:00</updated>
    <id>http://juelite.github.io/blog/2017/09/19/laravel-learn-notes</id>
    <content type="html"><![CDATA[<h2>1. Eloquent</h2>

<h3>Eloquent 模型约定</h3>

<h4>数据表名称</h4>

<pre><code>```
&lt;?php
    namespace App;
    use Illuminate\Database\Eloquent\Model;
    class Article extends Model
    {
        //
    }
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;我们并没有告诉 Eloquent Article模型该用哪张数据表，除非数据表明确地指定了其它名称，否则将使用类的「蛇形名称」、复数形式名称来作为数据表的名称 也就是 articles 默认是他使用的表&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;我们也可以在模型上定义一个 table 属性，用来指定自定义的数据表名称
</span><span class='line'>&lt;code&gt;
</span><span class='line'>    /**
</span><span class='line'>     * 该模型关联数据表
</span><span class='line'>     *
</span><span class='line'>     * @var string
</span><span class='line'>     */
</span><span class='line'>    protected $table = 'my_articles' //指定模型关联的数据表
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;主键&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Eloquent 也会假设每个数据表都有一个叫做 id 的主键字段，我们也可以通过 $primaryKey 属性来重写这个约定
</span><span class='line'>&lt;code&gt;
</span><span class='line'>    /**
</span><span class='line'>     * 该模型关联数据表主键
</span><span class='line'>     *
</span><span class='line'>     * @var string
</span><span class='line'>     */
</span><span class='line'>    protected $primaryKey = 'uid';
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>注：Eloquent 假定主键是一个递增的整数值，这意味着在默认情况下主键将自动的被强制转换为 int。 如果我们想使用非递增或者非数字的主键，我们必须在模型 public $incrementing 属性设置为false
</span><span class='line'>&lt;code&gt;
</span><span class='line'>    /**
</span><span class='line'>     * 该模型表主键自增
</span><span class='line'>     *
</span><span class='line'>     * @var bool
</span><span class='line'>     */
</span><span class='line'>    public $incrementing = false;
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;时间戳&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;默认情况下，Eloquent 会认为在我们的数据库表有 created_at 和 updated_at 字段，若我们不希望让 Eloquent 来自动维护这两个字段，可在模型内将 $timestamps 属性设置为 false
</span><span class='line'>&lt;code&gt;
</span><span class='line'>    /**
</span><span class='line'>     * 该模型是否被自动维护时间戳
</span><span class='line'>     *
</span><span class='line'>     * @var bool
</span><span class='line'>     */
</span><span class='line'>    public $timestamps = false;
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;数据库连接&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;默认情况下，所有的 Eloquent 模型会使用应用程序中默认的数据库连接设置。如果我们想为模型指定不同的连接，可以使用 $connection 属性
</span><span class='line'>&lt;code&gt;
</span><span class='line'>    /**
</span><span class='line'>     * 此模型的连接名称。
</span><span class='line'>     *
</span><span class='line'>     * @var string
</span><span class='line'>     */
</span><span class='line'>    protected $connection = 'connection-name';
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;查询&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;&lt;?php
</span><span class='line'>
</span><span class='line'>    use App\Article;
</span><span class='line'>
</span><span class='line'>    $articles = Article::all();
</span><span class='line'>
</span><span class='line'>    foreach ($flights as $flight) {
</span><span class='line'>        echo $flight-&gt;name;
</span><span class='line'>    }
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;上面实例可以查询与模型关联的数据表数据，一般我们正式开发不可能这样简单的取出数据，我们还有更多的条件：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>    $articles = Article::where('status', 1)
</span><span class='line'>               -&gt;orderBy('created_at', 'desc')
</span><span class='line'>               -&gt;take(10)
</span><span class='line'>               -&gt;get();
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>更多 Eloquent 查询中使用的方法参见：&lt;a href="https://d.laravel-china.org/docs/5.5/queries#introduction"&gt;https://d.laravel-china.org/docs/5.5/queries#introduction&lt;/a&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;类似 all 以及 get 之类的可以取回多个结果的 Eloquent 方法，将会返回一个 Illuminate\Database\Eloquent\Collection 实例， Collection 类提供 多种辅助函数 来处理 Eloquent 结果，参见：&lt;a href="https://d.laravel-china.org/docs/5.5/eloquent-collections#available-methods"&gt;https://d.laravel-china.org/docs/5.5/eloquent-collections#available-methods&lt;/a&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h2&gt;2.&lt;/h2&gt;
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>    &lt;title type="html"&gt;&lt;![CDATA[Laravel 5.4 Migrate error:Specified Key Was Too Long Error]]&gt;&lt;/title&gt;
</span><span class='line'>    &lt;link href="http://juelite.github.io/blog/2017/09/06/laravel-5-dot-4-migrate-error-specified-key-was-too-long-error/"/&gt;
</span><span class='line'>    &lt;updated&gt;2017-09-06T09:52:28+08:00&lt;/updated&gt;
</span><span class='line'>    &lt;id&gt;http://juelite.github.io/blog/2017/09/06/laravel-5-dot-4-migrate-error-specified-key-was-too-long-error&lt;/id&gt;
</span><span class='line'>    &lt;content type="html"&gt;&lt;![CDATA[&lt;pre&gt;&lt;code&gt;[Illuminate\Database\QueryException]                                                                                                                                                 
</span><span class='line'>  SQLSTATE[42000]: Syntax error or access violation: 1071 Specified key was too long; max key length is 767 bytes (SQL: alter table `users` add unique `users_email_unique`(`email`))  
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  [PDOException]                                                                                                   
</span><span class='line'>  SQLSTATE[42000]: Syntax error or access violation: 1071 Specified key was too long; max key length is 767 bytes 
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;问题根源&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;MySql支持的utf8编码最大字符长度为3字节，如果遇到4字节的宽字符就会出现插入异常。三个字节UTF-8最大能编码的Unicode字符是0xffff，即Unicode中的基本多文种平面（BMP）。因而包括Emoji表情（Emoji是一种特殊的Unicode编码）在内的非基本多文种平面的Unicode字符都无法使用MySql的utf8字符集存储。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;这也应该就是Laravel 5.4改用4字节长度的utf8mb4字符编码的原因之一。不过要注意的是，只有MySql 5.5.3版本以后才开始支持utf8mb4字符编码（查看版本：selection version();）。如果MySql版本过低，需要进行版本更新。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;注：如果是从Laravel 5.3升级到Laravel 5.4，不需要对字符编码做切换。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;解决问题&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;1.升级MySql版本到5.5.3以上。
</span><span class='line'>2.手动配置迁移命令migrate生成的默认字符串长度，在AppServiceProvider中调用Schema::defaultStringLength方法来实现配置：
</span><span class='line'>文件位置：/Users/wy/Documents/www/news.local.com/app/Providers/AppServiceProvider.php</span></code></pre></td></tr></table></div></figure>
use Illuminate\Support\Facades\Schema;</p>

<p>/<em>*
* Bootstrap any application services.
*
* @return void
</em>/
public function boot()
{
   Schema::defaultStringLength(191);
}
```</p>
]]></content>
  </entry>
  
</feed>
